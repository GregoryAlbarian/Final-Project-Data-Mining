{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Copy of  project_draft2.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/GregoryAlbarian/Final-Project-Data-Mining/blob/main/machine%20learning%20tests\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OrtYpjUK9MQZ",
        "outputId": "a9659219-6855-4e7e-9025-47f9daff180f"
      },
      "source": [
        "import seaborn as sn\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.utils import resample\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import roc_curve, roc_auc_score, auc\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn import tree\n",
        "from sklearn import metrics\n",
        "from sklearn.metrics import r2_score\n",
        "import numpy as np\n",
        "import statsmodels.api as sm\n",
        "from sklearn.metrics import accuracy_score as acc\n",
        "from mlxtend.feature_selection import SequentialFeatureSelector as sfs\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "from mlxtend.plotting import plot_sequential_feature_selection as plot_sfs\n",
        "\n",
        "dt=pd.read_csv('https://raw.githubusercontent.com/GregoryAlbarian/DataForCS530/main/data.csv')\n",
        "print(dt.info())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n",
            "  warnings.warn(msg, category=FutureWarning)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100000 entries, 0 to 99999\n",
            "Data columns (total 30 columns):\n",
            " #   Column                                            Non-Null Count   Dtype  \n",
            "---  ------                                            --------------   -----  \n",
            " 0   Age                                               100000 non-null  int64  \n",
            " 1   Gender                                            100000 non-null  int64  \n",
            " 2   Sector                                            100000 non-null  int64  \n",
            " 3   Working_same_sector                               100000 non-null  int64  \n",
            " 4   Specialization                                    100000 non-null  int64  \n",
            " 5   Work_hours                                        100000 non-null  int64  \n",
            " 6   Work_years_span                                   100000 non-null  int64  \n",
            " 7   Patient_per_day                                   100000 non-null  int64  \n",
            " 8   Overtime_work_interest                            100000 non-null  int64  \n",
            " 9   Overtime_work_paid                                100000 non-null  int64  \n",
            " 10  Stressed_during_work                              100000 non-null  int64  \n",
            " 11  Feeling_on_job                                    100000 non-null  int64  \n",
            " 12  Source_of_stress                                  99746 non-null   float64\n",
            " 13  Handling_stress                                   100000 non-null  int64  \n",
            " 14  Inform_Management_problems                        100000 non-null  int64  \n",
            " 15  Management_initiative_to_problems                 100000 non-null  int64  \n",
            " 16  Hospital_care_towards_stress                      100000 non-null  int64  \n",
            " 17  Stress_affecting_patient_care                     100000 non-null  int64  \n",
            " 18  Stress_affecting_concentration                    100000 non-null  int64  \n",
            " 19  Effort_to_reduce_stress_to_improve_concentration  100000 non-null  int64  \n",
            " 20  Stress_due_to_too_many_duties                     100000 non-null  int64  \n",
            " 21  Stress_due_to_age                                 100000 non-null  int64  \n",
            " 22  Stress_reason_family                              100000 non-null  int64  \n",
            " 23  Stress_due_to_competition                         100000 non-null  int64  \n",
            " 24  Prefer_to_stay_alone                              100000 non-null  int64  \n",
            " 25  Prefer_taking_responsibilities                    100000 non-null  int64  \n",
            " 26  Alcohol_usage                                     100000 non-null  int64  \n",
            " 27  Stress_nervous_habits                             100000 non-null  int64  \n",
            " 28  Stress_makes_nervous                              100000 non-null  int64  \n",
            " 29  Stress_affects_emotions                           100000 non-null  int64  \n",
            "dtypes: float64(1), int64(29)\n",
            "memory usage: 22.9 MB\n",
            "None\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0GXm-1a4YZ9O"
      },
      "source": [
        "dt = dt.dropna()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TEa3Nyzofq2j",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e0b62659-e25e-4a3a-d175-e7d2d6cbc894"
      },
      "source": [
        "dt['Stressed_during_work'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1    53391\n",
              "2    39693\n",
              "3     6662\n",
              "Name: Stressed_during_work, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OeSyWO-wdsIv"
      },
      "source": [
        "dt_majority1 = dt[dt.Stressed_during_work==1]\n",
        "dt_majority2 = dt[dt.Stressed_during_work==2]\n",
        "dt_minority = dt[dt.Stressed_during_work==3]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QmAVEmySd5hU"
      },
      "source": [
        "dt_majority1_downsampled = resample(dt_majority1,replace=False,n_samples=6662,random_state=42)\n",
        "dt_minority2_downsampled = resample(dt_majority2,replace=False,n_samples=6662,random_state=42)\n",
        "dt_balanced = pd.concat([dt_majority1_downsampled,dt_minority2_downsampled,dt_minority])"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "X-ImHZjues_O",
        "outputId": "881b5b01-1a18-48d6-a68e-1fb845c61933"
      },
      "source": [
        "dt_balanced['Stressed_during_work'].value_counts()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3    6662\n",
              "2    6662\n",
              "1    6662\n",
              "Name: Stressed_during_work, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aQ4hLUhCInAO",
        "outputId": "8d97a3ba-73dc-40dd-b276-af496798cb86"
      },
      "source": [
        "dt_balanced.info()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Int64Index: 19986 entries, 81481 to 66443\n",
            "Data columns (total 30 columns):\n",
            " #   Column                                            Non-Null Count  Dtype  \n",
            "---  ------                                            --------------  -----  \n",
            " 0   Age                                               19986 non-null  int64  \n",
            " 1   Gender                                            19986 non-null  int64  \n",
            " 2   Sector                                            19986 non-null  int64  \n",
            " 3   Working_same_sector                               19986 non-null  int64  \n",
            " 4   Specialization                                    19986 non-null  int64  \n",
            " 5   Work_hours                                        19986 non-null  int64  \n",
            " 6   Work_years_span                                   19986 non-null  int64  \n",
            " 7   Patient_per_day                                   19986 non-null  int64  \n",
            " 8   Overtime_work_interest                            19986 non-null  int64  \n",
            " 9   Overtime_work_paid                                19986 non-null  int64  \n",
            " 10  Stressed_during_work                              19986 non-null  int64  \n",
            " 11  Feeling_on_job                                    19986 non-null  int64  \n",
            " 12  Source_of_stress                                  19986 non-null  float64\n",
            " 13  Handling_stress                                   19986 non-null  int64  \n",
            " 14  Inform_Management_problems                        19986 non-null  int64  \n",
            " 15  Management_initiative_to_problems                 19986 non-null  int64  \n",
            " 16  Hospital_care_towards_stress                      19986 non-null  int64  \n",
            " 17  Stress_affecting_patient_care                     19986 non-null  int64  \n",
            " 18  Stress_affecting_concentration                    19986 non-null  int64  \n",
            " 19  Effort_to_reduce_stress_to_improve_concentration  19986 non-null  int64  \n",
            " 20  Stress_due_to_too_many_duties                     19986 non-null  int64  \n",
            " 21  Stress_due_to_age                                 19986 non-null  int64  \n",
            " 22  Stress_reason_family                              19986 non-null  int64  \n",
            " 23  Stress_due_to_competition                         19986 non-null  int64  \n",
            " 24  Prefer_to_stay_alone                              19986 non-null  int64  \n",
            " 25  Prefer_taking_responsibilities                    19986 non-null  int64  \n",
            " 26  Alcohol_usage                                     19986 non-null  int64  \n",
            " 27  Stress_nervous_habits                             19986 non-null  int64  \n",
            " 28  Stress_makes_nervous                              19986 non-null  int64  \n",
            " 29  Stress_affects_emotions                           19986 non-null  int64  \n",
            "dtypes: float64(1), int64(29)\n",
            "memory usage: 4.7 MB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "d1uqnvtMXkQ_"
      },
      "source": [
        "def calculate_vif_(X, thresh=5):\n",
        "    variables = list(range(X.shape[1]))\n",
        "    dropped = True\n",
        "    while dropped:\n",
        "        dropped = False\n",
        "        vif = [variance_inflation_factor(X.iloc[:, variables].values, ix)\n",
        "               for ix in range(X.iloc[:, variables].shape[1])]\n",
        "\n",
        "        maxloc = vif.index(max(vif))\n",
        "        if max(vif) > thresh:\n",
        "            print('dropping \\'' + X.iloc[:, variables].columns[maxloc] +\n",
        "                  '\\' at index: ' + str(maxloc))\n",
        "            del variables[maxloc]\n",
        "            dropped = True\n",
        "\n",
        "    print('Remaining variables:')\n",
        "    print(X.columns[variables])\n",
        "    return X.iloc[:, variables]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gZqwFC-KXoGX",
        "outputId": "0fb17e51-62c9-4f3f-d6f5-48fc378eeb58"
      },
      "source": [
        "#Dropping features based on VIF with threshold of VIF <= 5\n",
        "stressed_during_work_features = dt_balanced.astype('category').drop(['Stressed_during_work'], axis = 1)\n",
        "X1 = calculate_vif_(stressed_during_work_features)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/statsmodels/stats/outliers_influence.py:185: RuntimeWarning: divide by zero encountered in double_scalars\n",
            "  vif = 1. / (1. - r_squared_i)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "dropping 'Stress_affecting_concentration' at index: 17\n",
            "dropping 'Prefer_taking_responsibilities' at index: 23\n",
            "dropping 'Alcohol_usage' at index: 23\n",
            "dropping 'Stress_affects_emotions' at index: 25\n",
            "dropping 'Sector' at index: 2\n",
            "dropping 'Working_same_sector' at index: 2\n",
            "dropping 'Effort_to_reduce_stress_to_improve_concentration' at index: 15\n",
            "dropping 'Work_years_span' at index: 4\n",
            "dropping 'Stress_makes_nervous' at index: 20\n",
            "dropping 'Stress_nervous_habits' at index: 19\n",
            "dropping 'Stress_reason_family' at index: 16\n",
            "dropping 'Stress_due_to_too_many_duties' at index: 14\n",
            "dropping 'Inform_Management_problems' at index: 10\n",
            "dropping 'Stress_due_to_competition' at index: 14\n",
            "dropping 'Gender' at index: 1\n",
            "dropping 'Feeling_on_job' at index: 6\n",
            "dropping 'Overtime_work_paid' at index: 5\n",
            "dropping 'Handling_stress' at index: 6\n",
            "dropping 'Stress_due_to_age' at index: 9\n",
            "dropping 'Prefer_to_stay_alone' at index: 9\n",
            "dropping 'Stress_affecting_patient_care' at index: 8\n",
            "dropping 'Hospital_care_towards_stress' at index: 7\n",
            "dropping 'Age' at index: 0\n",
            "dropping 'Overtime_work_interest' at index: 3\n",
            "dropping 'Work_hours' at index: 1\n",
            "dropping 'Management_initiative_to_problems' at index: 3\n",
            "Remaining variables:\n",
            "Index(['Specialization', 'Patient_per_day', 'Source_of_stress'], dtype='object')\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2x5X_GmSZJwv",
        "outputId": "95a58099-6fcc-4b99-ca54-9ac84db349a2"
      },
      "source": [
        "#VIF after some of the features have been selected out based on previous VIF dropping\n",
        "vif_data_target1 = pd.DataFrame()\n",
        "vif_data_target1[\"feature\"] = X1.columns\n",
        "vif_data_target1[\"VIF\"] = [variance_inflation_factor(X1.values, i)\n",
        "                         for i in range(len(X1.columns))]\n",
        "  \n",
        "print(vif_data_target1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "            feature       VIF\n",
            "0    Specialization  4.410331\n",
            "1   Patient_per_day  4.506649\n",
            "2  Source_of_stress  2.673969\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HeNYVH-XCcHO"
      },
      "source": [
        "#Create dummies for features selected and split dataset into train and test set\n",
        "categorical_columns = X1.loc[:, X1.columns].columns.tolist()\n",
        "for col in categorical_columns:\n",
        "    col_ohe = pd.get_dummies(X1[col], prefix=col)\n",
        "    X1 = pd.concat((X1, col_ohe), axis=1).drop(col, axis=1)\n",
        "\n",
        "\n",
        "y = dt_balanced.astype('category').loc[:, \"Stressed_during_work\"]\n",
        "\n",
        "X_train1, X_test1, y_train1, y_test1 = train_test_split(X1, y, test_size=0.3, random_state = 42)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gKmZJgEL1EfX",
        "outputId": "d9e270d5-88c2-4cfa-ad06-6131be71029c"
      },
      "source": [
        "lm = LinearRegression()\n",
        "\n",
        "# Build step forward feature selection\n",
        "sfs1 = sfs(lm,\n",
        "           k_features='best',\n",
        "           forward=True,\n",
        "           floating=False,\n",
        "           verbose=2,\n",
        "           scoring='r2',\n",
        "           cv=5)\n",
        "\n",
        "# Perform SFFS\n",
        "sfs1 = sfs1.fit(X_train1, y_train1)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  21 out of  21 | elapsed:    0.2s finished\n",
            "\n",
            "[2021-05-13 20:42:24] Features: 1/21 -- score: 0.3054237115735652[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  20 out of  20 | elapsed:    0.2s finished\n",
            "\n",
            "[2021-05-13 20:42:24] Features: 2/21 -- score: 0.5772288113130322[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  19 out of  19 | elapsed:    0.2s finished\n",
            "\n",
            "[2021-05-13 20:42:24] Features: 3/21 -- score: 0.6031909701609636[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  18 out of  18 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:24] Features: 4/21 -- score: 0.6285882458825209[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  17 out of  17 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:25] Features: 5/21 -- score: 0.6449774822315799[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  16 out of  16 | elapsed:    0.5s finished\n",
            "\n",
            "[2021-05-13 20:42:25] Features: 6/21 -- score: 0.6645865740822048[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  15 out of  15 | elapsed:    0.6s finished\n",
            "\n",
            "[2021-05-13 20:42:26] Features: 7/21 -- score: 0.6897388464977616[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  14 out of  14 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:26] Features: 8/21 -- score: 0.7233830736763991[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  13 out of  13 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:27] Features: 9/21 -- score: 0.7377417585746546[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  12 out of  12 | elapsed:    0.5s finished\n",
            "\n",
            "[2021-05-13 20:42:27] Features: 10/21 -- score: 0.747765734546299[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  11 out of  11 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:28] Features: 11/21 -- score: 0.7594627009977192[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done  10 out of  10 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:28] Features: 12/21 -- score: 0.7626931996795471[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   9 out of   9 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:28] Features: 13/21 -- score: 0.7667092757119011[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   8 out of   8 | elapsed:    0.4s finished\n",
            "\n",
            "[2021-05-13 20:42:29] Features: 14/21 -- score: 0.7675169492139102[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   7 out of   7 | elapsed:    0.3s finished\n",
            "\n",
            "[2021-05-13 20:42:29] Features: 15/21 -- score: 0.7676591527128253[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   6 out of   6 | elapsed:    0.3s finished\n",
            "\n",
            "[2021-05-13 20:42:29] Features: 16/21 -- score: 0.7680992877174209[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   5 out of   5 | elapsed:    0.3s finished\n",
            "\n",
            "[2021-05-13 20:42:30] Features: 17/21 -- score: 0.7681801534703452[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   4 out of   4 | elapsed:    0.2s finished\n",
            "\n",
            "[2021-05-13 20:42:30] Features: 18/21 -- score: 0.7681043829611924[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   3 out of   3 | elapsed:    0.2s finished\n",
            "\n",
            "[2021-05-13 20:42:30] Features: 19/21 -- score: 0.7679912837850116[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   2 out of   2 | elapsed:    0.1s finished\n",
            "\n",
            "[2021-05-13 20:42:30] Features: 20/21 -- score: 0.7679040863258934[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s remaining:    0.0s\n",
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.1s finished\n",
            "\n",
            "[2021-05-13 20:42:30] Features: 21/21 -- score: 0.7680830531863553"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "id": "0cI-j4cB7E77",
        "outputId": "436a35a3-4465-4173-f33f-70f9755dacae"
      },
      "source": [
        "fig1 = plot_sfs(sfs1.get_metric_dict(),\n",
        "                kind='std_dev')\n",
        "\n",
        "plt.title('Sequential Forward Selection (w. StdDev)')\n",
        "plt.grid()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dXvn_eER4ZgW",
        "outputId": "c37ccf1e-92db-4c0c-f5c3-0c3264ab72f9"
      },
      "source": [
        "feat_cols = list(sfs1.k_feature_names_)\n",
        "print('Best R2 score: %.2f' % sfs1.k_score_)  \n",
        "print('Best subset (indices):', sfs1.k_feature_idx_)                                        \n",
        "print('Best subset (corresponding names):', *feat_cols,sep=\"\\n\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Best R2 score: 0.77\n",
            "Best subset (indices): (0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 20)\n",
            "Best subset (corresponding names):\n",
            "Specialization_1\n",
            "Specialization_2\n",
            "Specialization_3\n",
            "Specialization_4\n",
            "Specialization_5\n",
            "Specialization_7\n",
            "Specialization_8\n",
            "Specialization_9\n",
            "Specialization_10\n",
            "Specialization_11\n",
            "Specialization_12\n",
            "Patient_per_day_1\n",
            "Patient_per_day_2\n",
            "Patient_per_day_3\n",
            "Source_of_stress_1.0\n",
            "Source_of_stress_2.0\n",
            "Source_of_stress_5.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 700
        },
        "id": "eNcA6PH5duDH",
        "outputId": "93aecce7-46bd-4a23-a80f-ff917fcaff83"
      },
      "source": [
        "pd.DataFrame.from_dict(sfs1.get_metric_dict()).T"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_idx</th>\n",
              "      <th>cv_scores</th>\n",
              "      <th>avg_score</th>\n",
              "      <th>feature_names</th>\n",
              "      <th>ci_bound</th>\n",
              "      <th>std_dev</th>\n",
              "      <th>std_err</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>(10,)</td>\n",
              "      <td>[0.3137046311735143, 0.29734165348977226, 0.29...</td>\n",
              "      <td>0.305424</td>\n",
              "      <td>(Specialization_11,)</td>\n",
              "      <td>0.0137825</td>\n",
              "      <td>0.0107233</td>\n",
              "      <td>0.00536164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>(6, 10)</td>\n",
              "      <td>[0.6000579365618097, 0.5754411436821686, 0.560...</td>\n",
              "      <td>0.577229</td>\n",
              "      <td>(Specialization_7, Specialization_11)</td>\n",
              "      <td>0.024108</td>\n",
              "      <td>0.0187568</td>\n",
              "      <td>0.00937841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>(6, 10, 14)</td>\n",
              "      <td>[0.62778568782372, 0.6034122604519665, 0.58355...</td>\n",
              "      <td>0.603191</td>\n",
              "      <td>(Specialization_7, Specialization_11, Patient_...</td>\n",
              "      <td>0.02594</td>\n",
              "      <td>0.0201822</td>\n",
              "      <td>0.0100911</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>(6, 10, 14, 17)</td>\n",
              "      <td>[0.6530145979701953, 0.6262005216430708, 0.612...</td>\n",
              "      <td>0.628588</td>\n",
              "      <td>(Specialization_7, Specialization_11, Patient_...</td>\n",
              "      <td>0.023697</td>\n",
              "      <td>0.0184371</td>\n",
              "      <td>0.00921855</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>(6, 10, 13, 14, 17)</td>\n",
              "      <td>[0.6611875360145019, 0.6418649504992622, 0.631...</td>\n",
              "      <td>0.644977</td>\n",
              "      <td>(Specialization_7, Specialization_11, Patient_...</td>\n",
              "      <td>0.0181464</td>\n",
              "      <td>0.0141185</td>\n",
              "      <td>0.00705925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>(6, 10, 11, 13, 14, 17)</td>\n",
              "      <td>[0.683520921336879, 0.6606403888549516, 0.6500...</td>\n",
              "      <td>0.664587</td>\n",
              "      <td>(Specialization_7, Specialization_11, Speciali...</td>\n",
              "      <td>0.0191728</td>\n",
              "      <td>0.0149171</td>\n",
              "      <td>0.00745853</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>(6, 8, 10, 11, 13, 14, 17)</td>\n",
              "      <td>[0.708810660242266, 0.6832126478208138, 0.6778...</td>\n",
              "      <td>0.689739</td>\n",
              "      <td>(Specialization_7, Specialization_9, Specializ...</td>\n",
              "      <td>0.0170314</td>\n",
              "      <td>0.013251</td>\n",
              "      <td>0.00662552</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>(6, 7, 8, 10, 11, 13, 14, 17)</td>\n",
              "      <td>[0.739187222636988, 0.7186962062805642, 0.7113...</td>\n",
              "      <td>0.723383</td>\n",
              "      <td>(Specialization_7, Specialization_8, Specializ...</td>\n",
              "      <td>0.0146272</td>\n",
              "      <td>0.0113805</td>\n",
              "      <td>0.00569024</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>(6, 7, 8, 10, 11, 13, 14, 17, 20)</td>\n",
              "      <td>[0.7558224255492929, 0.7320320522125591, 0.725...</td>\n",
              "      <td>0.737742</td>\n",
              "      <td>(Specialization_7, Specialization_8, Specializ...</td>\n",
              "      <td>0.0155064</td>\n",
              "      <td>0.0120645</td>\n",
              "      <td>0.00603225</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>(3, 6, 7, 8, 10, 11, 13, 14, 17, 20)</td>\n",
              "      <td>[0.7667605975641054, 0.7415354737793942, 0.736...</td>\n",
              "      <td>0.747766</td>\n",
              "      <td>(Specialization_4, Specialization_7, Specializ...</td>\n",
              "      <td>0.0160982</td>\n",
              "      <td>0.0125249</td>\n",
              "      <td>0.00626246</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>(3, 6, 7, 8, 9, 10, 11, 13, 14, 17, 20)</td>\n",
              "      <td>[0.7783322404015226, 0.7528529659050017, 0.748...</td>\n",
              "      <td>0.759463</td>\n",
              "      <td>(Specialization_4, Specialization_7, Specializ...</td>\n",
              "      <td>0.0160195</td>\n",
              "      <td>0.0124638</td>\n",
              "      <td>0.00623188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>(3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 17, 20)</td>\n",
              "      <td>[0.7823479634881515, 0.7560079835459503, 0.751...</td>\n",
              "      <td>0.762693</td>\n",
              "      <td>(Specialization_4, Specialization_5, Specializ...</td>\n",
              "      <td>0.0159961</td>\n",
              "      <td>0.0124455</td>\n",
              "      <td>0.00622276</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>(3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 20)</td>\n",
              "      <td>[0.7867281898528852, 0.7583698638886454, 0.756...</td>\n",
              "      <td>0.766709</td>\n",
              "      <td>(Specialization_4, Specialization_5, Specializ...</td>\n",
              "      <td>0.017039</td>\n",
              "      <td>0.0132569</td>\n",
              "      <td>0.00662847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>(3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17,...</td>\n",
              "      <td>[0.7881037554114527, 0.7595607231802957, 0.756...</td>\n",
              "      <td>0.767517</td>\n",
              "      <td>(Specialization_4, Specialization_5, Specializ...</td>\n",
              "      <td>0.0176141</td>\n",
              "      <td>0.0137044</td>\n",
              "      <td>0.00685219</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>(2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, ...</td>\n",
              "      <td>[0.7883665760246445, 0.7597670960968462, 0.756...</td>\n",
              "      <td>0.767659</td>\n",
              "      <td>(Specialization_3, Specialization_4, Specializ...</td>\n",
              "      <td>0.0176954</td>\n",
              "      <td>0.0137677</td>\n",
              "      <td>0.00688383</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>(0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1...</td>\n",
              "      <td>[0.7893293918464276, 0.7603889045689056, 0.757...</td>\n",
              "      <td>0.768099</td>\n",
              "      <td>(Specialization_1, Specialization_3, Specializ...</td>\n",
              "      <td>0.0180818</td>\n",
              "      <td>0.0140683</td>\n",
              "      <td>0.00703414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...</td>\n",
              "      <td>[0.7895419744778391, 0.760387147219068, 0.7573...</td>\n",
              "      <td>0.76818</td>\n",
              "      <td>(Specialization_1, Specialization_2, Specializ...</td>\n",
              "      <td>0.0180909</td>\n",
              "      <td>0.0140753</td>\n",
              "      <td>0.00703765</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...</td>\n",
              "      <td>[0.7894464707030586, 0.7602899539161565, 0.757...</td>\n",
              "      <td>0.768104</td>\n",
              "      <td>(Specialization_1, Specialization_2, Specializ...</td>\n",
              "      <td>0.0181517</td>\n",
              "      <td>0.0141226</td>\n",
              "      <td>0.00706131</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>(0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...</td>\n",
              "      <td>[0.7890866319375667, 0.7603889715696386, 0.757...</td>\n",
              "      <td>0.767991</td>\n",
              "      <td>(Specialization_1, Specialization_2, Specializ...</td>\n",
              "      <td>0.0179347</td>\n",
              "      <td>0.0139538</td>\n",
              "      <td>0.0069769</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>\n",
              "      <td>[0.7890227114623265, 0.7604275815565853, 0.757...</td>\n",
              "      <td>0.767904</td>\n",
              "      <td>(Specialization_1, Specialization_2, Specializ...</td>\n",
              "      <td>0.0178764</td>\n",
              "      <td>0.0139084</td>\n",
              "      <td>0.00695422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...</td>\n",
              "      <td>[0.7890332536325941, 0.7603679835328675, 0.756...</td>\n",
              "      <td>0.768083</td>\n",
              "      <td>(Specialization_1, Specialization_2, Specializ...</td>\n",
              "      <td>0.0179957</td>\n",
              "      <td>0.0140013</td>\n",
              "      <td>0.00700063</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                          feature_idx  ...     std_err\n",
              "1                                               (10,)  ...  0.00536164\n",
              "2                                             (6, 10)  ...  0.00937841\n",
              "3                                         (6, 10, 14)  ...   0.0100911\n",
              "4                                     (6, 10, 14, 17)  ...  0.00921855\n",
              "5                                 (6, 10, 13, 14, 17)  ...  0.00705925\n",
              "6                             (6, 10, 11, 13, 14, 17)  ...  0.00745853\n",
              "7                          (6, 8, 10, 11, 13, 14, 17)  ...  0.00662552\n",
              "8                       (6, 7, 8, 10, 11, 13, 14, 17)  ...  0.00569024\n",
              "9                   (6, 7, 8, 10, 11, 13, 14, 17, 20)  ...  0.00603225\n",
              "10               (3, 6, 7, 8, 10, 11, 13, 14, 17, 20)  ...  0.00626246\n",
              "11            (3, 6, 7, 8, 9, 10, 11, 13, 14, 17, 20)  ...  0.00623188\n",
              "12         (3, 4, 6, 7, 8, 9, 10, 11, 13, 14, 17, 20)  ...  0.00622276\n",
              "13     (3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 20)  ...  0.00662847\n",
              "14  (3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17,...  ...  0.00685219\n",
              "15  (2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, ...  ...  0.00688383\n",
              "16  (0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 1...  ...  0.00703414\n",
              "17  (0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...  ...  0.00703765\n",
              "18  (0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...  ...  0.00706131\n",
              "19  (0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14...  ...   0.0069769\n",
              "20  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...  ...  0.00695422\n",
              "21  (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,...  ...  0.00700063\n",
              "\n",
              "[21 rows x 7 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 59
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_1_ajfmNxQpI",
        "outputId": "7fb2de7f-159b-4e2b-f5ad-b11e897a19c0"
      },
      "source": [
        "#Linear model with all original variables\n",
        "x_all = dt_balanced.astype('category').drop(['Stressed_during_work'], axis = 1)\n",
        "y_all = dt_balanced.astype('category').loc[:, \"Stressed_during_work\"]\n",
        "cc = x_all.loc[:, x_all.columns].columns.tolist()\n",
        "for col in cc:\n",
        "    col_all = pd.get_dummies(x_all[col], prefix=col)\n",
        "    x_all = pd.concat((x_all, col_all), axis=1).drop(col, axis=1)\n",
        "\n",
        "X_train_all_target1, X_test_all_target1, y_train_all_target1, y_test_all_target1 = train_test_split(x_all, y_all, test_size=0.3, random_state = 42)\n",
        "\n",
        "lm1 = LinearRegression()\n",
        "lm1.fit(X_train_all_target1,y_train_all_target1)\n",
        "pred_all_target1 = lm1.predict(X_test_all_target1)\n",
        "print(\"R^2: {}\".format(round(lm1.score(X_test_all_target1, y_test_all_target1),2)))\n",
        "print(\"MSE: {}\".format(round(metrics.mean_squared_error(y_test_all_target1,pred_all_target1),2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R^2: 1.0\n",
            "MSE: 0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lrnb1d7zpAco",
        "outputId": "78903325-12dc-44ef-aef0-79669b1c1104"
      },
      "source": [
        "#Linear model with all VIF selected variables\n",
        "lm2 = LinearRegression()\n",
        "lm2.fit(X_train1,y_train1)\n",
        "pred_V_target1 = lm2.predict(X_test1)\n",
        "print(\"R^2: {}\".format(round(lm2.score(X_test1, y_test1),2)))\n",
        "print(\"MSE: {}\".format(round(metrics.mean_squared_error(y_test1,pred_V_target1),2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R^2: 0.75\n",
            "MSE: 0.16\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vEmls_4ou52u",
        "outputId": "a37462fe-744b-4489-9651-8f366eb572b0"
      },
      "source": [
        "#Linear model with stepwise selected variables based on SequentialFeatureSelector\n",
        "X_key_train = X_train1[feat_cols]\n",
        "X_key_test = X_test1[feat_cols]\n",
        "lm3 = LinearRegression()\n",
        "lm3.fit(X_key_train,y_train1)\n",
        "pred_key = lm3.predict(X_key_test)\n",
        "print(\"R^2: {}\".format(round(lm3.score(X_key_test, y_test1),2)))\n",
        "print(\"MSE: {}\".format(round(metrics.mean_squared_error(y_test1,pred_key),2)))"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "R^2: 0.75\n",
            "MSE: 0.16\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}